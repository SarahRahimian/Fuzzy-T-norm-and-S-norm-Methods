# X Fuzzy Set
import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzz
x= np.arange(0, 5, 0.001)
mfx= fuzz.trapmf(x, [0, 1, 2.25, 4])
plt.title("x fuzzy set")
plt.grid()
plt.plot(mfx)
plt.savefig("x fuzzy set")
plt.show()

# Y Fuzzy Set
y= np.arange(0, 5, 0.001)
mfy= fuzz.trapmf(y, [2, 2.5, 3, 4.5])
plt.title("y fuzzy set")
plt.grid()
plt.plot(mfy)
plt.savefig("y fuzzy set")
plt.show()

# T-norm MinimumZadeh
def cartprod(x, y):
    return np.fmin(mfx, mfy)
Tnorm_min = cartprod(x, y)
plt.plot(Tnorm_min)
plt.title("Tnorm Minimum Zade")
plt.grid()
plt.savefig("Tnorm Minimum Zade")
plt.show()

# T-norm Algebraic Product
def cartprod(x, y):
    return mfx*mfy
Tnorm_prod = cartprod(x, y)
plt.plot(Tnorm_prod)
plt.title("Tnorm Algebratic Product")
plt.grid()
plt.savefig("Tnorm Algebratic Product")
plt.show()

# T-norm Bounded
Bounded = mfx+mfy-1
Tnorm_Bound = np.maximum(0 ,Bounded)
plt.plot(Tnorm_Bound)
plt.title("Tnorm Bounded")
plt.grid()
plt.savefig("Tnorm Bounded")
plt.show()

# T-norm Drastic
def Drastic_Product(mfx, mfy):
    if mfy == 1:
        return mfx
    elif mfx == 1:
        return mfy
    else:
        return 0
    
vDrastic_Product = np.vectorize(Drastic_Product)
Tnorm_DP = vDrastic_Product(mfx, mfy)
plt.grid()
plt.plot(Tnorm_DP)
plt.title("Tnorm Drastic")
plt.savefig("Tnorm Drastic")
plt.show()

# T-norm Yager(p=1)
Tnorm_Yager1 = 1 - (np.minimum(1, ((1-mfx) ** 1 + (1-mfy) ** 1)**(1/1)))
plt.plot(Tnorm_Yager1)
plt.title("Tnorm Yager1")
plt.grid()
plt.savefig("Tnorm Yager1")
plt.show()

# T-norm Yager(p=2)
Tnorm_Yager2 = 1 - (np.minimum(1, ((1-mfx) ** 2 + (1-mfy) ** 2)**(1/2)))
plt.plot(Tnorm_Yager2)
plt.title("Tnorm Yager2")
plt.grid()
plt.savefig("Tnorm Yager2")
plt.show()

# T-norm Yager(p=3)
Tnorm_Yager3 = 1 - (np.minimum(1, ((1-mfx) ** 3 + (1-mfy) ** 3)**(1/3)))
plt.plot(Tnorm_Yager3)
plt.title("Tnorm Yager3")
plt.grid()
plt.savefig("Tnorm Yager3")
plt.show()

# T-norm Yager(p=10)
Tnorm_Yager10 = 1 - (np.minimum(1, ((1-mfx) ** 10 + (1-mfy) ** 10)**(1/10)))
plt.plot(Tnorm_Yager10)
plt.title("Tnorm Yager10")
plt.grid()
plt.savefig("Tnorm Yager10")
plt.show()

# T-norm Yager(p=oo)
Tnorm_Yagerinf = 1 - (np.minimum(1, ((1-mfx) ** np.inf + (1-mfy) ** np.inf)**(1/np.inf)))
plt.plot(Tnorm_Yagerinf)
plt.title("Tnorm Yager inf")
plt.grid()
plt.savefig("Tnorm Yager inf")
plt.show()

# S-norm MaximumZadeh
def cartprod(x, y):
    return np.fmax(mfx, mfy)
Snorm_max = cartprod(x, y)
plt.plot(Snorm_max)
plt.title("Snorm Maximum Zade")
plt.grid()
plt.savefig("Snorm Maximum Zade")
plt.show()

# S-norm Algebraic Product
def cartprod(x, y):
    return mfx+mfy-mfx*mfy
Snorm_prod = cartprod(x, y)
plt.plot(Snorm_prod)
plt.title("Snorm Algebratic Product")
plt.grid()
plt.savefig("Snorm Algebratic Product")
plt.show()

# S-norm Bounded
Bounded = mfx+mfy
Snorm_Bound = np.minimum(1 ,Bounded)
plt.plot(Snorm_Bound)
plt.title("Snorm Bounded")
plt.grid()
plt.savefig("Snorm Bounded")
plt.show()

# S-norm Drastic
def Drastic_Sum(mfx, mfy):
    if mfy == 0:
        return mfx
    elif mfx == 0:
        return mfy
    else:
        return 1
    
vDrastic_Sum = np.vectorize(Drastic_Sum)
Snorm_DS = vDrastic_Sum(mfx, mfy)
plt.grid()
plt.plot(Snorm_DS)
plt.title("Snorm Drastic")
plt.savefig("Snorm Drastic")
plt.show()

# S-norm Yager(p=1)
Snorm_Yager1 = np.minimum(1, ((mfx) ** 1 + (mfy) ** 1)**(1/1))
plt.plot(Snorm_Yager1)
plt.title("Snorm Yager1")
plt.grid()
plt.savefig("Snorm Yager1")
plt.show()

# S-norm Yager(p=2)
Snorm_Yager2 = np.minimum(1, ((mfx) ** 2 + (mfy) ** 2)**(1/2))
plt.plot(Snorm_Yager2)
plt.title("Snorm Yager2")
plt.grid()
plt.savefig("Snorm Yager2")
plt.show()

# S-norm Yager(p=3)
Snorm_Yager3 = np.minimum(1, ((mfx) ** 3 + (mfy) ** 3)**(1/3))
plt.plot(Snorm_Yager3)
plt.title("Snorm Yager3")
plt.grid()
plt.savefig("Snorm Yager3")
plt.show()

# S-norm Yager(p=10)
Snorm_Yager10 = np.minimum(1, ((mfx) ** 10 + (mfy) ** 10)**(1/10))
plt.plot(Snorm_Yager10)
plt.title("Snorm Yager10")
plt.grid()
plt.savefig("Snorm Yager10")
plt.show()

# S-norm Yager(p=oo)
Snorm_Yagerinf = np.minimum(1, ((mfx) ** np.inf + (mfy) ** np.inf)**(1/np.inf))
plt.plot(Snorm_Yagerinf)
plt.title("Snorm Yager inf")
plt.grid()
plt.savefig("Snorm Yager inf")
plt.show()
